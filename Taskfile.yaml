version: "3"

vars:
  VERSION:
    sh: git describe --tags --always
  COMMIT_SHA:
    sh: git rev-parse HEAD
  BUILD_DATE:
    sh: date '+%F %T'
  MIHOMO_VERSION:
    sh: |
      curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | jq -r '.name'
  MIHOMO_DASHBOARD_VERSION:
    sh: |
      curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/metacubexd/releases/latest | jq -r '.name'
  MIHOMO_DASHBOARD_YACD_VERSION:
    sh: |
      curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
        https://api.github.com/repos/MetaCubeX/Yacd-meta/releases/latest | jq -r '.name'

tasks:
  clean:
    desc: Clean Up Build Cache Files
    cmds:
      - rm -rf build static
  mkdir:
    desc: Create Build Dir
    cmds:
      - mkdir -p build static
    status:
      - test -d build

  download-mmdb:
    desc: Download GeoIP2-CN MMDB
    cmds:
      - curl -sSL https://cdn.jsdelivr.net/gh/Hackl0us/GeoIP2-CN@release/Country.mmdb > static/Country.mmdb
    status:
      - test -f static/Country.mmdb

  copy-tracing:
    desc: Copy Tracing Dashboard Config
    cmds:
      - cp -r tracing static/tracing
    status:
      - test -d static/tracing

  build-mihomo-dashboard:
    desc: Build Mihomo Dashboard
    cmds:
      - git clone --depth 1 --branch {{.MIHOMO_DASHBOARD_YACD_VERSION}} https://github.com/MetaCubeX/Yacd-meta.git build/yacd
      - defer: rm -rf build/yacd
      - git clone --depth 1 --branch {{.MIHOMO_DASHBOARD_VERSION}} https://github.com/MetaCubeX/metacubexd.git build/official
      - defer: rm -rf build/official
      - (cd build/yacd && pnpm install && pnpm build)
      - (cd build/official && pnpm install && pnpm build)
      - cp -r build/yacd/public static/yacd
      - cp -r build/official/dist static/official
    status:
      - test -d static/yacd
      - test -d static/official

  download-mihomo:
    desc: Download Mihomo
    vars:
      MIHOMO_URL:
        sh: |
          curl -sSL {{if .GITHUB_TOKEN}}-H 'Authorization: Bearer {{.GITHUB_TOKEN}}'{{end}} \
            https://api.github.com/repos/MetaCubeX/mihomo/releases/latest | \
            jq -r '.assets[].browser_download_url | select (. | test("mihomo-{{.PLATFORM}}-v\\d+.*gz"))'
    cmds:
      - curl -sSL {{.MIHOMO_URL}} > build/mihomo-{{.PLATFORM}}.gz
      - gzip -d build/mihomo-{{.PLATFORM}}.gz
      - chmod +x build/mihomo-{{.PLATFORM}}
    status:
      - test -f build/mihomo-{{.PLATFORM}}

  copy-mihomo:
    desc: Copy Mihomo To Embed FS
    cmds:
      - task: download-mihomo
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - cp -f build/mihomo-{{.PLATFORM}} static/xclash

  build-tpclash-mihomo:
    desc: Build TPClash With Mihomo
    label: build-mihomo-{{.PLATFORM}}
    cmds:
      - task: mkdir
      - task: download-mmdb
      - task: build-mihomo-dashboard
      - task: download-mihomo
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - task: copy-mihomo
        vars: { PLATFORM: "{{.PLATFORM}}" }
      - |
        GOOS={{.GOOS}} GOARCH={{.GOARCH}} GOARM={{.GOARM}} GOAMD64={{.GOAMD64}} GOMIPS={{.GOMIPS}} \
        go build -trimpath -o build/tpclash-mihomo-{{.GOOS}}-{{.GOARCH}}{{if .GOAMD64}}-{{.GOAMD64}}{{end}}{{if .GOARM}}-v{{.GOARM}}{{end}} \
          -ldflags "{{if not .DEBUG}}-w -s{{end}} \
          -X 'main.build={{.BUILD_DATE}}' \
          -X 'main.commit={{.COMMIT_SHA}}' \
          -X 'main.version={{.VERSION}}' \
          -X 'main.clash=Mihomo {{.MIHOMO_VERSION}}' \
          -X 'main.branch=mihomo' \
          -X 'main.binName=tpclash-mihomo-{{.GOOS}}-{{.GOARCH}}{{if .GOAMD64}}-{{.GOAMD64}}{{end}}{{if .GOARM}}-v{{.GOARM}}{{end}}'" \
          {{if .DEBUG}}-gcflags "all=-N -l"{{end}}

  linux-386-mihomo:
    desc: Build TPClash With Mihomo(linux/386)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-386, GOOS: linux, GOARCH: 386 }
  linux-amd64-mihomo:
    desc: Build TPClash With Mihomo(linux/amd64)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-amd64-compatible, GOOS: linux, GOARCH: amd64 }
  linux-amd64-v3-mihomo:
    desc: Build TPClash With Mihomo(linux/amd64-v3)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-amd64, GOOS: linux, GOARCH: amd64, GOAMD64: v3 }
  linux-arm64-mihomo:
    desc: Build TPClash With Mihomo(linux/arm64)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-arm64, GOOS: linux, GOARCH: arm64 }
  linux-armv5-mihomo:
    desc: Build TPClash With Mihomo(linux/armv5)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-armv5, GOOS: linux, GOARCH: arm, GOARM: 5 }
  linux-armv6-mihomo:
    desc: Build TPClash With Mihomo(linux/armv6)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-armv6, GOOS: linux, GOARCH: arm, GOARM: 6 }
  linux-armv7-mihomo:
    desc: Build TPClash With Mihomo(linux/armv7)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-armv7, GOOS: linux, GOARCH: arm, GOARM: 7 }
  linux-mips-hardfloat-mihomo:
    desc: Build TPClash With Mihomo(linux/mips-hardfloat)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-mips-hardfloat, GOOS: linux, GOARCH: mips, GOMIPS: hardfloat }
  linux-mipsle-softfloat-mihomo:
    desc: Build TPClash With Mihomo(linux/mipsle-softfloat)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-mipsle-softfloat, GOOS: linux, GOARCH: mipsle, GOMIPS: softfloat }
  linux-mipsle-hardfloat-mihomo:
    desc: Build TPClash With Mihomo(linux/mipsle-hardfloat)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-mipsle-hardfloat, GOOS: linux, GOARCH: mipsle, GOMIPS: hardfloat }
  linux-mips64-mihomo:
    desc: Build TPClash With Mihomo(linux/mips64)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-mips64, GOOS: linux, GOARCH: mips64 }
  linux-mips64le-mihomo:
    desc: Build TPClash With Mihomo(linux/mips64le)
    cmds:
      - task: build-tpclash-mihomo
        vars: { PLATFORM: linux-mips64le, GOOS: linux, GOARCH: mips64le }

  default:
    cmds:
      - task: clean
      - rm -rf static/yacd static/official
      # - task: linux-386-mihomo
      - task: linux-amd64-mihomo
      # - task: linux-amd64-v3-mihomo
      # - task: linux-arm64-mihomo
      # - task: linux-armv5-mihomo
      # - task: linux-armv6-mihomo
      # - task: linux-armv7-mihomo
      - rm -rf static build/mihomo-*
      - cp flatcar.butane.yaml example.yaml build
